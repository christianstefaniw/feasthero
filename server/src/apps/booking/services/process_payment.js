const { settings } = require('../../../feasthero/settings');
const ProcessClassBooking = require('./process_class_booking');
const stripe = require('stripe')(settings.stripe.SECRET_KEY);
const SendConfirmedEmails = require('./send_confirmed_emails');

/**
 * A class that implements all aspects of fulfilling a payment
 * 
 * @see {ProcessClassBooking}
 */
class ProcessPayment {
    /**
     * @constructs
     * @param {Object} bookingDetails - customer's booking details
     * @param {String} cardTokenId - card token id generated by stripe 
     */
    constructor(bookingDetails, cardTokenId) {
        this.cardTokenId = cardTokenId;
        this.bookingDetails = bookingDetails;
    }

    /**
     * @access protected
     */
    async process() {
        const charge = await this._createCharge().catch((error) => ({ error: error }));

        if (charge.error)
            return false;

        await (SendConfirmedEmails(this.bookingDetails).sendMailToChefAndCustomer());
        return true;
    }

    /**
     * @access private
     */
    _dollarsToCents(dollars) {
        return Math.floor(dollars * 100);
    }

    /**
     * @access private
     */
    async _createCharge() {
        await stripe.charges.create(
            {
                amount: this._dollarsToCents(this.bookingDetails.grandTotal),
                currency: 'cad',
                source: this.cardTokenId,
                description: `Payment for FeastHero class at ${this.bookingDetails.selectedClassDateTime}`,
                receipt_email: this.bookingDetails.customerEmail
            })
            .then((charge) => console.log(`payment success: ${charge}`))
            .catch((error) => { throw (new Error(`payment failed: ${error}`)) });
    }

}

module.exports = ProcessPayment;